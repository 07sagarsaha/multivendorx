For create the composer file 

#command
1. composer init \
  --name="multivendorx/multivendorx" \
  --description="Boost sales with real-time stock alerts! Notify customers instantly when products are back in stock. Simplify data management by exporting and importing stock data with ease." \
  --author="MultiVendorX <contact@multivendorx.com>" \
  --type="wordpress-plugin" \
  --homepage="https://multivendorx.com" \
  --stability="dev" \
  --license="GPL-2.0-or-later"

2. add autoloader manually
"autoload": {
        "psr-4": {
            "MultiVendorX\\": "classes/"
        }
    },

3. composer dump-autoload

4. composer config platform.php 8.0 ( latest php file )

5. composer require php

// For wpml supprot we need to use this 
http_build_url


//PHP_CodeSniffer rules for checking if your PHP code follows the official WordPress coding standards 
//â€” like indentation, naming conventions, escaping, etc.

6. composer require --dev wp-coding-standards/wpcs:dev-develop

7. composer require --dev dealerdirect/phpcodesniffer-composer-installer:^0.7.2

8. composer require --dev phpcompatibility/phpcompatibility

add phpcs script into composer.json
  "scripts": {
      "phpcs": [
          "vendor/bin/phpcs -p -s"
      ]
  }

add phpcbf script into composer.json for beautify php code 
"phpfix": [
    "vendor/bin/phpcbf -p"
  ]


  // For unit test setup
  9. composer require --dev phpunit/phpunit ( The main testing framework (PHPUnit) for writing unit tests. )
  10. composer require --dev wp-phpunit/wp-phpunit ( Makes it easy to test WordPress-specific code (like plugins) using PHPUnit. )
  11. composer require --dev yoast/phpunit-polyfills ( Provides polyfills for PHPUnit features across multiple versions. )
  12. composer require --dev brain/monkey ( A powerful mocking framework for WordPress functions (which are normally not mockable). )

  // run this command in terminal
  // it create a install-wp-tests.sh file into bin folder
  13.  wp scaffold plugin-tests notifima ( generate bin/install-wp-tests.sh tests/bootstrap.php and test-sample.php )
  or for only install-wp-tests.sh
       curl -o ./bin/install-wp-tests.sh https://raw.githubusercontent.com/wp-cli/scaffold-command/master/templates/install-wp-tests.sh

  //for run test
  14. bash bin/install-wp-tests.sh wordpress_test root '' localhost latest
  15. ./vendor/bin/phpunit ( pnpm run test )













































bootstrap
<?php
/**
 * PHPUnit bootstrap file.
 *
 * @package Notifima
 */

define( 'NOTIFIMA_PLUGIN_DIR', dirname( __DIR__, 2 ) );
define( 'TEST_WC_DIR', dirname( NOTIFIMA_PLUGIN_DIR, 3 ) . '/woocommerce' );

echo "Notifima plugin dir : ". NOTIFIMA_PLUGIN_DIR . "\n";
echo "test wc dir : ". TEST_WC_DIR;

$_tests_dir = getenv( 'WP_TESTS_DIR' );

if ( ! $_tests_dir ) {
	$_tests_dir = rtrim( sys_get_temp_dir(), '/\\' ) . '/wordpress-tests-lib';
}

// Forward custom PHPUnit Polyfills configuration to PHPUnit bootstrap file.
$_phpunit_polyfills_path = getenv( 'WP_TESTS_PHPUNIT_POLYFILLS_PATH' );
if ( false !== $_phpunit_polyfills_path ) {
	define( 'WP_TESTS_PHPUNIT_POLYFILLS_PATH', $_phpunit_polyfills_path );
}

if ( ! file_exists( "{$_tests_dir}/includes/functions.php" ) ) {
	echo "Could not find {$_tests_dir}/includes/functions.php, have you run bin/install-wp-tests.sh ?" . PHP_EOL; // phpcs:ignore WordPress.Security.EscapeOutput.OutputNotEscaped
	exit( 1 );
}

// Give access to tests_add_filter() function.
require_once "{$_tests_dir}/includes/functions.php";

/**
 * Manually load the plugin being tested.
 */
function _manually_load_plugin() {
	require TEST_WC_DIR . '/woocommerce.php';
	require NOTIFIMA_PLUGIN_DIR . '/product_stock_alert.php';
}

tests_add_filter( 'muplugins_loaded', '_manually_load_plugin' );

function notifima_truncate_table_data(): void {
	$tables = array(
		'notifima_subscribers',
    );
    global $wpdb;
    foreach ( $tables as $table_name ) {
		$wpdb->query( "TRUNCATE TABLE {$wpdb->prefix}{$table_name}" );
    }
}

function install_wc() {
	define( 'WP_UNINSTALL_PLUGIN', true );
	define( 'WC_REMOVE_ALL_DATA', true );

	include TEST_WC_DIR . '/uninstall.php';

	WC_Install::install();

	// WC()->init();

	// Reload capabilities after install, see https://core.trac.wordpress.org/ticket/28374.
	if ( version_compare( $GLOBALS['wp_version'], '4.7', '<' ) ) {
		$GLOBALS['wp_roles']->reinit();
	} else {
		$GLOBALS['wp_roles'] = null; // phpcs:ignore WordPress.WP.GlobalVariablesOverride.Prohibited
		wp_roles();
	}

	echo esc_html( 'Installing WooCommerce...' . PHP_EOL );
}

/**
 * Placeholder for activation function
 *
 * Nothing being called here yet.
 */
function install_notifima() {
	echo 'Installing Notifima...' . PHP_EOL;
    notifima_truncate_table_data();

	Notifima()->activate();
}

// install WC and Notifima
tests_add_filter( 'setup_theme', 'install_wc' );
tests_add_filter( 'setup_theme', 'install_notifima' );


// Start up the WP testing environment.
require "{$_tests_dir}/includes/bootstrap.php";


phpunit-wp-config.php
<?php

$wordpress_dir = dirname( __DIR__, 2 ) . '/wordpress/';
if ( ! is_dir( $wordpress_dir ) ) {
    $wordpress_dir = dirname( __DIR__, 5 ) . '/';
}

/* Path to the WordPress codebase you'd like to test. Add a forward slash in the end. */
define( 'ABSPATH', $wordpress_dir );

/*
 * Path to the theme to test with.
 *
 * The 'default' theme is symlinked from test/phpunit/data/themedir1/default into
 * the themes directory of the WordPress installation defined above.
 */
define( 'WP_DEFAULT_THEME', 'default' );

// Test with multisite enabled.
// Alternatively, use the tests/phpunit/multisite.xml configuration file.
// define( 'WP_TESTS_MULTISITE', true );

// Force known bugs to be run.
// Tests with an associated Trac ticket that is still open are normally skipped.
// define( 'WP_TESTS_FORCE_KNOWN_BUGS', true );

// Test with WordPress debug mode (default).
define( 'WP_DEBUG', true );
define( 'WP_DEBUG_LOG', true );

// ** MySQL settings ** //

// This configuration file will be used by the copy of WordPress being tested.
// wordpress/wp-config.php will be ignored.

// WARNING WARNING WARNING!
// These tests will DROP ALL TABLES in the database with the prefix named below.
// DO NOT use a production database or one that is shared with something else.

define( 'DB_NAME', getenv( 'WP_DB_NAME' ) ?: 'wordpress_test' );
define( 'DB_USER', getenv( 'WP_DB_USER' ) ?: 'root' );
define( 'DB_PASSWORD', getenv( 'WP_DB_PASS' ) ?: '' );
define( 'DB_HOST', 'localhost' );
define( 'DB_CHARSET', 'utf8' );
define( 'DB_COLLATE', '' );

$table_prefix = 'unit_';   // Only numbers, letters, and underscores please!

define( 'WP_TESTS_DOMAIN', 'example.org' );
define( 'WP_TESTS_EMAIL', 'admin@example.org' );
define( 'WP_TESTS_TITLE', 'Test Blog' );

define( 'WP_PHP_BINARY', 'php' );

define( 'WPLANG', '' );
